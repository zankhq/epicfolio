---
import Layout from "@layouts/Layout.astro";
import Item from "@components/Item.astro";
import Media from "@components/Media.astro";
import { getCollection } from "astro:content";

const portfolioEntries = await getCollection("portfolio");
---

<!-- Original: https://codepen.io/supah/ -->
<Layout bodyClass="overflow-hidden">
	<div class="portfolio-items h-screen overflow-hidden cursor-grab">
		<ul class="h-full">
			{
				portfolioEntries.map(({ data: { title, image: {src} }, slug }) => (
					<Fragment>
						<Item title={title} src={slug} />
						<Media src={src} alt={slug}>
					</Fragment>
				))
			}
		</ul>
	</div>
</Layout>

<script>
	import { gsap } from "gsap";

	function initialize() {

		/*--------------------
		Vars
		--------------------*/
		const $menu = document.querySelector(".portfolio-items");
		const $items = document.querySelectorAll(".portfolio-items > ul > li");
		let menuHeight = $menu?.clientHeight;
		let itemHeight = $items[0]?.clientHeight;
		let wrapHeight = $items.length * itemHeight;

		$items.forEach(function ($item) {
			if ($item && $item instanceof HTMLElement) {
				$item.style.position = 'absolute';
			}
		});

		let scrollSpeed = 0;
		let oldScrollY = 0;
		let scrollY = 0;
		let y = 0;

		/*--------------------
		Lerp
		--------------------*/
		const lerp = (v0, v1, t) => {
			return v0 * (1 - t) + v1 * t;
		};

		/*--------------------
		Dispose
		--------------------*/
		const dispose = (scroll) => {
			gsap?.set($items, {
				y: (i) => {
					return i * itemHeight + scroll;
				},
				modifiers: {
					y: (y) => {
						const s = gsap?.utils.wrap(-itemHeight, wrapHeight - itemHeight, parseInt(y));
						return `${s}px`;
					},
				},
			});
		};
		dispose(0);

		/*--------------------
		Wheel
		--------------------*/
		const handleMouseWheel = (e) => {
			scrollY -= e.deltaY;
		};

		/*--------------------
		Touch
		--------------------*/

		let touchStart = 0;
		let touchY = 0;
		let isDragging = false;
		const handleTouchStart = (e) => {
			touchStart = e.clientY || e.touches[0].clientY;
			isDragging = true;
			$menu?.classList.add("cursor-grabbing");
		};
		const handleTouchMove = (e) => {
			if (!isDragging) return;
			touchY = e.clientY || e.touches[0].clientY;
			scrollY += (touchY - touchStart) * 2.5;
			touchStart = touchY;
		};
		const handleTouchEnd = () => {
			isDragging = false;
			$menu?.classList.remove("cursor-grabbing");
		};

		/*--------------------
		Listeners
		--------------------*/
		$menu?.addEventListener("mousewheel", handleMouseWheel);

		$menu?.addEventListener("touchstart", handleTouchStart);
		$menu?.addEventListener("touchmove", handleTouchMove);
		$menu?.addEventListener("touchend", handleTouchEnd);

		$menu?.addEventListener("mousedown", handleTouchStart);
		$menu?.addEventListener("mousemove", handleTouchMove);
		$menu?.addEventListener("mouseleave", handleTouchEnd);
		$menu?.addEventListener("mouseup", handleTouchEnd);

		$menu?.addEventListener("selectstart", () => {
			return false;
		});

		/*--------------------
		Resize
		--------------------*/
		window.addEventListener("resize", () => {
			menuHeight = $menu?.clientHeight;
			itemHeight = $items[0].clientHeight;
			wrapHeight = $items.length * itemHeight;
		});

		/*--------------------
		Render
		--------------------*/
		const render = () => {
			if (document.contains($menu)) {
				requestAnimationFrame(render);
				y = lerp(y, scrollY, 0.1);
				dispose(y);

				scrollSpeed = y - oldScrollY;
				oldScrollY = y;

				gsap?.to($items, {
					scale: 1 - Math.min(100, Math.abs(scrollSpeed)) * 0.005,
					rotate: scrollSpeed * 0.2,
				});
			}
		};

		render();
	}

	document.addEventListener('astro:page-load', () => {
		initialize();
	});
</script>
